{
  "mcp.server.template": {
    "prefix": "mcp-server",
    "body": [
      "import { Server } from '@modelcontextprotocol/sdk/server/index.js';",
      "import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';",
      "import {",
      "  CallToolRequestSchema,",
      "  ErrorCode,",
      "  ListToolsRequestSchema,",
      "  McpError,",
      "} from '@modelcontextprotocol/sdk/types.js';",
      "",
      "class ${1:MyMCP}Server {",
      "  private server: Server;",
      "",
      "  constructor() {",
      "    this.server = new Server(",
      "      {",
      "        name: '${2:my-mcp-server}',",
      "        version: '${3:1.0.0}',",
      "      },",
      "      {",
      "        capabilities: {",
      "          tools: {},",
      "        },",
      "      }",
      "    );",
      "",
      "    this.setupToolHandlers();",
      "    this.setupErrorHandling();",
      "  }",
      "",
      "  private setupToolHandlers(): void {",
      "    this.server.setRequestHandler(ListToolsRequestSchema, async () => {",
      "      return {",
      "        tools: [",
      "          {",
      "            name: '${4:example_tool}',",
      "            description: '${5:Example tool description}',",
      "            inputSchema: {",
      "              type: 'object',",
      "              properties: {",
      "                ${6:param}: {",
      "                  type: 'string',",
      "                  description: '${7:Parameter description}',",
      "                },",
      "              },",
      "              required: ['${6:param}'],",
      "            },",
      "          },",
      "        ],",
      "      };",
      "    });",
      "",
      "    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {",
      "      const { name, arguments: args } = request.params;",
      "",
      "      switch (name) {",
      "        case '${4:example_tool}':",
      "          return this.handleExampleTool(args);",
      "        default:",
      "          throw new McpError(",
      "            ErrorCode.MethodNotFound,",
      "            `Unknown tool: ${name}`",
      "          );",
      "      }",
      "    });",
      "  }",
      "",
      "  private async handleExampleTool(args: any): Promise<any> {",
      "    // Implementation here",
      "    return {",
      "      content: [",
      "        {",
      "          type: 'text',",
      "          text: `Result: ${args.${6:param}}`,",
      "        },",
      "      ],",
      "    };",
      "  }",
      "",
      "  private setupErrorHandling(): void {",
      "    this.server.onerror = (error) => console.error('[MCP Error]', error);",
      "    process.on('SIGINT', async () => {",
      "      await this.server.close();",
      "      process.exit(0);",
      "    });",
      "  }",
      "",
      "  async run(): Promise<void> {",
      "    const transport = new StdioServerTransport();",
      "    await this.server.connect(transport);",
      "    console.error('${1:MyMCP} MCP server running on stdio');",
      "  }",
      "}",
      "",
      "const server = new ${1:MyMCP}Server();",
      "server.run().catch(console.error);"
    ],
    "description": "Create a complete MCP Server template"
  },
  "mcp.tool.handler": {
    "prefix": "mcp-tool",
    "body": [
      "{",
      "  name: '${1:tool_name}',",
      "  description: '${2:Tool description}',",
      "  inputSchema: {",
      "    type: 'object',",
      "    properties: {",
      "      ${3:param}: {",
      "        type: '${4:string}',",
      "        description: '${5:Parameter description}',",
      "      },",
      "    },",
      "    required: ['${3:param}'],",
      "  },",
      "},"
    ],
    "description": "Create an MCP tool definition"
  },
  "mcp.tool.call": {
    "prefix": "mcp-call",
    "body": [
      "case '${1:tool_name}':",
      "  return this.handle${1/(.*)/${1:/capitalize}/}(args);"
    ],
    "description": "Add a tool call case"
  },
  "mcp.resource.template": {
    "prefix": "mcp-resource",
    "body": [
      "this.server.setRequestHandler(ListResourcesRequestSchema, async () => {",
      "  return {",
      "    resources: [",
      "      {",
      "        uri: '${1:resource://example}',",
      "        name: '${2:Example Resource}',",
      "        description: '${3:Resource description}',",
      "        mimeType: '${4:text/plain}',",
      "      },",
      "    ],",
      "  };",
      "});",
      "",
      "this.server.setRequestHandler(ReadResourceRequestSchema, async (request) => {",
      "  const { uri } = request.params;",
      "  ",
      "  switch (uri) {",
      "    case '${1:resource://example}':",
      "      return {",
      "        contents: [",
      "          {",
      "            uri,",
      "            mimeType: '${4:text/plain}',",
      "            text: '${5:Resource content}',",
      "          },",
      "        ],",
      "      };",
      "    default:",
      "      throw new McpError(",
      "        ErrorCode.InvalidRequest,",
      "        `Unknown resource: ${uri}`",
      "      );",
      "  }",
      "});"
    ],
    "description": "Add MCP resource handlers"
  },
  "mcp.prompt.template": {
    "prefix": "mcp-prompt",
    "body": [
      "this.server.setRequestHandler(ListPromptsRequestSchema, async () => {",
      "  return {",
      "    prompts: [",
      "      {",
      "        name: '${1:example_prompt}',",
      "        description: '${2:Prompt description}',",
      "        arguments: [",
      "          {",
      "            name: '${3:param}',",
      "            description: '${4:Parameter description}',",
      "            required: true,",
      "          },",
      "        ],",
      "      },",
      "    ],",
      "  };",
      "});",
      "",
      "this.server.setRequestHandler(GetPromptRequestSchema, async (request) => {",
      "  const { name, arguments: args } = request.params;",
      "  ",
      "  switch (name) {",
      "    case '${1:example_prompt}':",
      "      return {",
      "        description: '${2:Prompt description}',",
      "        messages: [",
      "          {",
      "            role: 'user',",
      "            content: {",
      "              type: 'text',",
      "              text: `${5:Prompt text with ${args?.${3:param}}}`,",
      "            },",
      "          },",
      "        ],",
      "      };",
      "    default:",
      "      throw new McpError(",
      "        ErrorCode.InvalidRequest,",
      "        `Unknown prompt: ${name}`",
      "      );",
      "  }",
      "});"
    ],
    "description": "Add MCP prompt handlers"
  }
}